package com.water.image.client.model;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-09")
public class FileData implements org.apache.thrift.TBase<FileData, FileData._Fields>, java.io.Serializable, Cloneable, Comparable<FileData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileData");

  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filepath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUFF_FIELD_DESC = new org.apache.thrift.protocol.TField("buff", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileDataTupleSchemeFactory();

  public String filename; // required
  public String filepath; // required
  public java.nio.ByteBuffer buff; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILENAME((short)1, "filename"),
    FILEPATH((short)2, "filepath"),
    BUFF((short)3, "buff");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILENAME
          return FILENAME;
        case 2: // FILEPATH
          return FILEPATH;
        case 3: // BUFF
          return BUFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILEPATH, new org.apache.thrift.meta_data.FieldMetaData("filepath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUFF, new org.apache.thrift.meta_data.FieldMetaData("buff", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileData.class, metaDataMap);
  }

  public FileData() {
  }

  public FileData(
    String filename,
    String filepath,
    java.nio.ByteBuffer buff)
  {
    this();
    this.filename = filename;
    this.filepath = filepath;
    this.buff = org.apache.thrift.TBaseHelper.copyBinary(buff);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileData(FileData other) {
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
    if (other.isSetFilepath()) {
      this.filepath = other.filepath;
    }
    if (other.isSetBuff()) {
      this.buff = org.apache.thrift.TBaseHelper.copyBinary(other.buff);
    }
  }

  public FileData deepCopy() {
    return new FileData(this);
  }

  @Override
  public void clear() {
    this.filename = null;
    this.filepath = null;
    this.buff = null;
  }

  public String getFilename() {
    return this.filename;
  }

  public FileData setFilename(String filename) {
    this.filename = filename;
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  public String getFilepath() {
    return this.filepath;
  }

  public FileData setFilepath(String filepath) {
    this.filepath = filepath;
    return this;
  }

  public void unsetFilepath() {
    this.filepath = null;
  }

  /** Returns true if field filepath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilepath() {
    return this.filepath != null;
  }

  public void setFilepathIsSet(boolean value) {
    if (!value) {
      this.filepath = null;
    }
  }

  public byte[] getBuff() {
    setBuff(org.apache.thrift.TBaseHelper.rightSize(buff));
    return buff == null ? null : buff.array();
  }

  public java.nio.ByteBuffer bufferForBuff() {
    return org.apache.thrift.TBaseHelper.copyBinary(buff);
  }

  public FileData setBuff(byte[] buff) {
    this.buff = buff == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(buff.clone());
    return this;
  }

  public FileData setBuff(java.nio.ByteBuffer buff) {
    this.buff = org.apache.thrift.TBaseHelper.copyBinary(buff);
    return this;
  }

  public void unsetBuff() {
    this.buff = null;
  }

  /** Returns true if field buff is set (has been assigned a value) and false otherwise */
  public boolean isSetBuff() {
    return this.buff != null;
  }

  public void setBuffIsSet(boolean value) {
    if (!value) {
      this.buff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((String)value);
      }
      break;

    case FILEPATH:
      if (value == null) {
        unsetFilepath();
      } else {
        setFilepath((String)value);
      }
      break;

    case BUFF:
      if (value == null) {
        unsetBuff();
      } else {
        if (value instanceof byte[]) {
          setBuff((byte[])value);
        } else {
          setBuff((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILENAME:
      return getFilename();

    case FILEPATH:
      return getFilepath();

    case BUFF:
      return getBuff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILENAME:
      return isSetFilename();
    case FILEPATH:
      return isSetFilepath();
    case BUFF:
      return isSetBuff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileData)
      return this.equals((FileData)that);
    return false;
  }

  public boolean equals(FileData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }

    boolean this_present_filepath = true && this.isSetFilepath();
    boolean that_present_filepath = true && that.isSetFilepath();
    if (this_present_filepath || that_present_filepath) {
      if (!(this_present_filepath && that_present_filepath))
        return false;
      if (!this.filepath.equals(that.filepath))
        return false;
    }

    boolean this_present_buff = true && this.isSetBuff();
    boolean that_present_buff = true && that.isSetBuff();
    if (this_present_buff || that_present_buff) {
      if (!(this_present_buff && that_present_buff))
        return false;
      if (!this.buff.equals(that.buff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilename()) ? 131071 : 524287);
    if (isSetFilename())
      hashCode = hashCode * 8191 + filename.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilepath()) ? 131071 : 524287);
    if (isSetFilepath())
      hashCode = hashCode * 8191 + filepath.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuff()) ? 131071 : 524287);
    if (isSetBuff())
      hashCode = hashCode * 8191 + buff.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FileData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilepath()).compareTo(other.isSetFilepath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilepath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filepath, other.filepath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuff()).compareTo(other.isSetBuff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buff, other.buff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileData(");
    boolean first = true;

    sb.append("filename:");
    if (this.filename == null) {
      sb.append("null");
    } else {
      sb.append(this.filename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filepath:");
    if (this.filepath == null) {
      sb.append("null");
    } else {
      sb.append(this.filepath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buff:");
    if (this.buff == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.buff, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (filename == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filename' was not present! Struct: " + toString());
    }
    if (filepath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filepath' was not present! Struct: " + toString());
    }
    if (buff == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'buff' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileDataStandardScheme getScheme() {
      return new FileDataStandardScheme();
    }
  }

  private static class FileDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILEPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filepath = iprot.readString();
              struct.setFilepathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buff = iprot.readBinary();
              struct.setBuffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(struct.filename);
        oprot.writeFieldEnd();
      }
      if (struct.filepath != null) {
        oprot.writeFieldBegin(FILEPATH_FIELD_DESC);
        oprot.writeString(struct.filepath);
        oprot.writeFieldEnd();
      }
      if (struct.buff != null) {
        oprot.writeFieldBegin(BUFF_FIELD_DESC);
        oprot.writeBinary(struct.buff);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileDataTupleScheme getScheme() {
      return new FileDataTupleScheme();
    }
  }

  private static class FileDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.filename);
      oprot.writeString(struct.filepath);
      oprot.writeBinary(struct.buff);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.filename = iprot.readString();
      struct.setFilenameIsSet(true);
      struct.filepath = iprot.readString();
      struct.setFilepathIsSet(true);
      struct.buff = iprot.readBinary();
      struct.setBuffIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

