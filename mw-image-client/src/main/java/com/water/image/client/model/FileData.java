package com.water.image.client.model;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-09")
public class FileData implements org.apache.thrift.TBase<FileData, FileData._Fields>, java.io.Serializable, Cloneable, Comparable<FileData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileData");

  private static final org.apache.thrift.protocol.TField SUFFIX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("suffixName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_BUFF_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBuff", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileDataTupleSchemeFactory();

  public String suffixName; // required
  public String filePath; // required
  public java.nio.ByteBuffer fileBuff; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUFFIX_NAME((short)1, "suffixName"),
    FILE_PATH((short)2, "filePath"),
    FILE_BUFF((short)3, "fileBuff");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUFFIX_NAME
          return SUFFIX_NAME;
        case 2: // FILE_PATH
          return FILE_PATH;
        case 3: // FILE_BUFF
          return FILE_BUFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUFFIX_NAME, new org.apache.thrift.meta_data.FieldMetaData("suffixName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_BUFF, new org.apache.thrift.meta_data.FieldMetaData("fileBuff", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileData.class, metaDataMap);
  }

  public FileData() {
  }

  public FileData(
    String suffixName,
    String filePath,
    java.nio.ByteBuffer fileBuff)
  {
    this();
    this.suffixName = suffixName;
    this.filePath = filePath;
    this.fileBuff = org.apache.thrift.TBaseHelper.copyBinary(fileBuff);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileData(FileData other) {
    if (other.isSetSuffixName()) {
      this.suffixName = other.suffixName;
    }
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetFileBuff()) {
      this.fileBuff = org.apache.thrift.TBaseHelper.copyBinary(other.fileBuff);
    }
  }

  public FileData deepCopy() {
    return new FileData(this);
  }

  @Override
  public void clear() {
    this.suffixName = null;
    this.filePath = null;
    this.fileBuff = null;
  }

  public String getSuffixName() {
    return this.suffixName;
  }

  public FileData setSuffixName(String suffixName) {
    this.suffixName = suffixName;
    return this;
  }

  public void unsetSuffixName() {
    this.suffixName = null;
  }

  /** Returns true if field suffixName is set (has been assigned a value) and false otherwise */
  public boolean isSetSuffixName() {
    return this.suffixName != null;
  }

  public void setSuffixNameIsSet(boolean value) {
    if (!value) {
      this.suffixName = null;
    }
  }

  public String getFilePath() {
    return this.filePath;
  }

  public FileData setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public byte[] getFileBuff() {
    setFileBuff(org.apache.thrift.TBaseHelper.rightSize(fileBuff));
    return fileBuff == null ? null : fileBuff.array();
  }

  public java.nio.ByteBuffer bufferForFileBuff() {
    return org.apache.thrift.TBaseHelper.copyBinary(fileBuff);
  }

  public FileData setFileBuff(byte[] fileBuff) {
    this.fileBuff = fileBuff == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(fileBuff.clone());
    return this;
  }

  public FileData setFileBuff(java.nio.ByteBuffer fileBuff) {
    this.fileBuff = org.apache.thrift.TBaseHelper.copyBinary(fileBuff);
    return this;
  }

  public void unsetFileBuff() {
    this.fileBuff = null;
  }

  /** Returns true if field fileBuff is set (has been assigned a value) and false otherwise */
  public boolean isSetFileBuff() {
    return this.fileBuff != null;
  }

  public void setFileBuffIsSet(boolean value) {
    if (!value) {
      this.fileBuff = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUFFIX_NAME:
      if (value == null) {
        unsetSuffixName();
      } else {
        setSuffixName((String)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case FILE_BUFF:
      if (value == null) {
        unsetFileBuff();
      } else {
        if (value instanceof byte[]) {
          setFileBuff((byte[])value);
        } else {
          setFileBuff((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUFFIX_NAME:
      return getSuffixName();

    case FILE_PATH:
      return getFilePath();

    case FILE_BUFF:
      return getFileBuff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUFFIX_NAME:
      return isSetSuffixName();
    case FILE_PATH:
      return isSetFilePath();
    case FILE_BUFF:
      return isSetFileBuff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileData)
      return this.equals((FileData)that);
    return false;
  }

  public boolean equals(FileData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_suffixName = true && this.isSetSuffixName();
    boolean that_present_suffixName = true && that.isSetSuffixName();
    if (this_present_suffixName || that_present_suffixName) {
      if (!(this_present_suffixName && that_present_suffixName))
        return false;
      if (!this.suffixName.equals(that.suffixName))
        return false;
    }

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_fileBuff = true && this.isSetFileBuff();
    boolean that_present_fileBuff = true && that.isSetFileBuff();
    if (this_present_fileBuff || that_present_fileBuff) {
      if (!(this_present_fileBuff && that_present_fileBuff))
        return false;
      if (!this.fileBuff.equals(that.fileBuff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSuffixName()) ? 131071 : 524287);
    if (isSetSuffixName())
      hashCode = hashCode * 8191 + suffixName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
    if (isSetFilePath())
      hashCode = hashCode * 8191 + filePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileBuff()) ? 131071 : 524287);
    if (isSetFileBuff())
      hashCode = hashCode * 8191 + fileBuff.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FileData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSuffixName()).compareTo(other.isSetSuffixName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuffixName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suffixName, other.suffixName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileBuff()).compareTo(other.isSetFileBuff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileBuff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBuff, other.fileBuff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileData(");
    boolean first = true;

    sb.append("suffixName:");
    if (this.suffixName == null) {
      sb.append("null");
    } else {
      sb.append(this.suffixName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileBuff:");
    if (this.fileBuff == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.fileBuff, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (suffixName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'suffixName' was not present! Struct: " + toString());
    }
    if (filePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filePath' was not present! Struct: " + toString());
    }
    if (fileBuff == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileBuff' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileDataStandardScheme getScheme() {
      return new FileDataStandardScheme();
    }
  }

  private static class FileDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUFFIX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suffixName = iprot.readString();
              struct.setSuffixNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_BUFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileBuff = iprot.readBinary();
              struct.setFileBuffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.suffixName != null) {
        oprot.writeFieldBegin(SUFFIX_NAME_FIELD_DESC);
        oprot.writeString(struct.suffixName);
        oprot.writeFieldEnd();
      }
      if (struct.filePath != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.filePath);
        oprot.writeFieldEnd();
      }
      if (struct.fileBuff != null) {
        oprot.writeFieldBegin(FILE_BUFF_FIELD_DESC);
        oprot.writeBinary(struct.fileBuff);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FileDataTupleScheme getScheme() {
      return new FileDataTupleScheme();
    }
  }

  private static class FileDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.suffixName);
      oprot.writeString(struct.filePath);
      oprot.writeBinary(struct.fileBuff);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.suffixName = iprot.readString();
      struct.setSuffixNameIsSet(true);
      struct.filePath = iprot.readString();
      struct.setFilePathIsSet(true);
      struct.fileBuff = iprot.readBinary();
      struct.setFileBuffIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

